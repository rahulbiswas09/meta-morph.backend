/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as ElevenLabs from "../../../../../index";
import { Invocations } from "../resources/invocations/client/Client";
export declare namespace Tests {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Tests {
    protected readonly _options: Tests.Options;
    protected _invocations: Invocations | undefined;
    constructor(_options?: Tests.Options);
    get invocations(): Invocations;
    /**
     * Creates a new agent response test.
     *
     * @param {ElevenLabs.conversationalAi.CreateUnitTestRequest} request
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.tests.create({
     *         chatHistory: [{
     *                 role: "user",
     *                 timeInCallSecs: 1
     *             }],
     *         successCondition: "success_condition",
     *         successExamples: [{
     *                 response: "response",
     *                 type: "success"
     *             }],
     *         failureExamples: [{
     *                 response: "response",
     *                 type: "failure"
     *             }],
     *         name: "name"
     *     })
     */
    create(request: ElevenLabs.conversationalAi.CreateUnitTestRequest, requestOptions?: Tests.RequestOptions): core.HttpResponsePromise<ElevenLabs.CreateUnitTestResponseModel>;
    private __create;
    /**
     * Gets an agent response test by ID.
     *
     * @param {string} testId - The id of a chat response test. This is returned on test creation.
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.tests.get("TeaqRRdTcIfIu2i7BYfT")
     */
    get(testId: string, requestOptions?: Tests.RequestOptions): core.HttpResponsePromise<ElevenLabs.GetUnitTestResponseModel>;
    private __get;
    /**
     * Updates an agent response test by ID.
     *
     * @param {string} testId - The id of a chat response test. This is returned on test creation.
     * @param {ElevenLabs.conversationalAi.UpdateUnitTestRequest} request
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.tests.update("TeaqRRdTcIfIu2i7BYfT", {
     *         chatHistory: [{
     *                 role: "user",
     *                 timeInCallSecs: 1
     *             }],
     *         successCondition: "success_condition",
     *         successExamples: [{
     *                 response: "response",
     *                 type: "success"
     *             }],
     *         failureExamples: [{
     *                 response: "response",
     *                 type: "failure"
     *             }],
     *         name: "name"
     *     })
     */
    update(testId: string, request: ElevenLabs.conversationalAi.UpdateUnitTestRequest, requestOptions?: Tests.RequestOptions): core.HttpResponsePromise<ElevenLabs.GetUnitTestResponseModel>;
    private __update;
    /**
     * Deletes an agent response test by ID.
     *
     * @param {string} testId - The id of a chat response test. This is returned on test creation.
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.tests.delete("TeaqRRdTcIfIu2i7BYfT")
     */
    delete(testId: string, requestOptions?: Tests.RequestOptions): core.HttpResponsePromise<unknown>;
    private __delete;
    /**
     * Gets multiple agent response tests by their IDs. Returns a dictionary mapping test IDs to test summaries.
     *
     * @param {ElevenLabs.conversationalAi.ListTestsByIdsRequestModel} request
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.tests.summaries({
     *         testIds: ["test_id_1", "test_id_2"]
     *     })
     */
    summaries(request: ElevenLabs.conversationalAi.ListTestsByIdsRequestModel, requestOptions?: Tests.RequestOptions): core.HttpResponsePromise<ElevenLabs.GetTestsSummariesByIdsResponseModel>;
    private __summaries;
    /**
     * Lists all agent response tests with pagination support and optional search filtering.
     *
     * @param {ElevenLabs.conversationalAi.TestsListRequest} request
     * @param {Tests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.tests.list()
     */
    list(request?: ElevenLabs.conversationalAi.TestsListRequest, requestOptions?: Tests.RequestOptions): core.HttpResponsePromise<ElevenLabs.GetTestsPageResponseModel>;
    private __list;
}
